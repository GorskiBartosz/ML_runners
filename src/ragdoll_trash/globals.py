from math import pi
from pymunk import moment_for_box

# velocity limits

CHARACTER_VELOCITY_LIMIT = 10
CHARACTER_ANGULAR_VELOCITY_LIMIT = pi / 16
GUN_VELOCITY_LIMIT = 10
GUN_ANGULAR_VELOCITY_LIMIT = pi / 16

# ragdoll constants

BODY_THICKNESS = 2
BODY_FRICTION = 0.5

HEAD_RADIUS = 4
TORSO_LENGTH = 15
UPPER_ARM_LENGTH = 6
LOWER_ARM_LENGTH = 6
UPPER_LEG_LENGTH = 8
LOWER_LEG_LENGTH = 8

HEAD_MASS = 5
TORSO_MASS = 20
UPPER_ARM_MASS = 4
LOWER_ARM_MASS = 3
UPPER_LEG_MASS = 6
LOWER_LEG_MASS = 4

HEAD_MOMENT = moment_for_box(HEAD_MASS, (HEAD_RADIUS, HEAD_RADIUS))
TORSO_MOMENT = moment_for_box(TORSO_MASS, (BODY_THICKNESS, TORSO_LENGTH))
UPPER_ARM_MOMENT = moment_for_box(UPPER_ARM_MASS, (BODY_THICKNESS, UPPER_ARM_LENGTH))
LOWER_ARM_MOMENT = moment_for_box(LOWER_ARM_MASS, (BODY_THICKNESS, LOWER_ARM_LENGTH))
UPPER_LEG_MOMENT = moment_for_box(UPPER_LEG_MASS, (BODY_THICKNESS, UPPER_LEG_LENGTH))
LOWER_LEG_MOMENT = moment_for_box(LOWER_LEG_MASS, (BODY_THICKNESS, LOWER_LEG_LENGTH))


# HEAD_MOMENT = moment_for_box(HEAD_MASS, HEAD_RADIUS)
# TORSO_MOMENT = moment_for_box(TORSO_MASS, BODY_THICKNESS)
# UPPER_ARM_MOMENT = moment_for_box(UPPER_ARM_MASS, BODY_THICKNESS)
# LOWER_ARM_MOMENT = moment_for_box(LOWER_ARM_MASS, BODY_THICKNESS)
# UPPER_LEG_MOMENT = moment_for_box(UPPER_LEG_MASS, BODY_THICKNESS)
# LOWER_LEG_MOMENT = moment_for_box(LOWER_LEG_MASS, BODY_THICKNESS)

# pymunk angle starts on the negative x axis and increases counterclockwise
NECK_ROTATION_MIN = pi - pi / 8
NECK_ROTATION_MAX = pi + pi / 8
SHOULDER_L_ROTATION_MIN = pi / 16
SHOULDER_L_ROTATION_MAX = pi - pi / 16
SHOULDER_R_ROTATION_MIN = -pi + pi / 16
SHOULDER_R_ROTATION_MAX = -pi / 16
ELBOW_L_ROTATION_MIN = 0
ELBOW_L_ROTATION_MAX = pi - pi / 16
ELBOW_R_ROTATION_MIN = -pi + pi / 16
ELBOW_R_ROTATION_MAX = 0
HIP_L_ROTATION_MIN = -pi / 2
HIP_L_ROTATION_MAX = 0
HIP_R_ROTATION_MIN = 0
HIP_R_ROTATION_MAX = pi / 2
KNEE_L_ROTATION_MIN = 0
KNEE_L_ROTATION_MAX = pi - pi / 16
KNEE_R_ROTATION_MIN = -pi + pi / 16
KNEE_R_ROTATION_MAX = 0

# timing constants

FPS = 60
STEP_TIME = 1. / FPS

# collision group enum

COLLISION_GROUP = {"wall": 1,
                   "character": 2
                   }

# misc. constants

SCREEN_SIZE = 200
WALL_WIDTH = 2
CROSSHAIRS_SIZE = 3


def flipy(xy):
    return xy[0], SCREEN_SIZE - xy[1]
